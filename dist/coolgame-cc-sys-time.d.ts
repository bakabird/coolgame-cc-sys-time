// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../coolgame-cc
//   ../coolgame-cc/Define

declare module 'coolgame-cc-sys-time' {
    import { SysBase } from "coolgame-cc";
    import { Action, IDisposable } from "coolgame-cc/Define";
    export class TimerModule implements IDisposable {
            constructor(_sys: TimeSys);
            Dispose(): void;
            delay(delay: number, func: Function, caller?: any, ...arg: any[]): number;
            nextframe(func: Function, caller?: any, ...arg: any[]): number;
    }
    /**
        * 定时器服务
        */
    export default class TimeSys extends SysBase {
            sysName: string;
            protected OnInit(complete: Action): void;
            protected OnLateInit(complete: Action): void;
            protected OnDispose(): void;
            protected update(dt: number): void;
            /**
                * 当前时间，秒
                */
            static get seconds(): number;
            /**
                * 注册并开始一个定时器
                * @param interval 间隔时间，单位秒
                * @param loops 循环次数，小于0表示无限循环
                * @param caller 回调者（用于this, 可以为null）
                * @param func 回调函数
                * @param args 回调参数，选填
                */
            timer(interval: number, loops: number, func: Function, caller?: any, ...args: any[]): number;
            /**
                * 延迟一定时间调用（一次）
                * @param interval 延迟多久执行，单位秒
                * @param func
                * @param caller
                * @param args
                */
            delay(interval: number, func: Function, caller?: any, ...args: any[]): number;
            /**
                * 注册一个帧回调计时器
                * @param loops 回调次数，小于0表示无限循环
                * @param caller
                * @param func
                * @param args
                */
            frame(loops: number, func: Function, caller?: any, ...args: any[]): number;
            /**
                * 注册一个延迟一帧执行的计时器
                * @param caller
                * @param func
                * @param args
                */
            nextFrame(func: Function, caller?: any, ...args: any[]): number;
            /**
                * 删除给定计时器
                * @param timerID 计时器id
                * @return undefined，方便链式表达
                */
            delete(timerID: number): undefined;
            isTimerComplete(timerID: number): boolean;
            getTimerInterval(timerID: number): number;
            getTimerCallback(timerID: number): Function;
            getTimerThisObj(timerID: number): any;
            getTimerNextTriggerTime(timerID: number): number;
            getTimerArgs(timerID: number): any[];
            triggerTimer(timerID: number): number;
            generateModule(): TimerModule;
            get timerCount(): number;
    }
}

